type: edu
custom_name: stage4
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage4Test;

    public class GameOfLifeTest extends GameOfLifeStage4Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/GameOfLife.java
  visible: true
  text: |
    package life;

    import javax.swing.*;

    public class GameOfLife extends JFrame {
        public GameOfLife() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: src/life/ApplicationRunner.java
  visible: true
  text: |
    package life;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new GameOfLife();
        }
    }
  learner_created: false
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import java.io.IOException;
    import java.util.Scanner;
    import java.util.Random;
    import java.lang.Thread;

    class Cell {
        private boolean state;

        public Cell() {
            this.state = false;
        }

        public void setState(boolean state) {
            this.state = state;
        }

        public void Die() {
            this.state = false;
        }

        public void Alive() {
            this.state = true;
        }

        public boolean isAlive() {
            return state;
        }
    }

    class Universe {
        static private int[] shift = {-1, 0, 1};

        int size;
        Cell[][] universe;

        public Universe(int size) {
            this.size = size;
            universe = new Cell[this.size][this.size];

            for (int i = 0; i < this.size; ++i) {
                for (int j = 0; j < this.size; ++j) {
                    universe[i][j] = new Cell();
                }
            }
        }

        public int getSize() {
            return size;
        }

        public void printUniverse() {
            for (Cell[] row : universe) {
                for (Cell cell : row) {
                    System.out.print(cell.isAlive() ? 'O' : ' ');
                }
                System.out.println();
            }
        }

        public Cell[] at(int i) {
            return universe[i];
        }

        public Cell at(int i, int j) {
            return universe[i][j];
        }

        public byte countAliveNeighbours(int i, int j) {
            byte alive = 0;

            for (int i_idx : shift) {
                for (int j_idx : shift) {
                    if (i_idx == j_idx && i_idx == 0) {
                        continue;
                    }

                    int x = (i + i_idx) % size;
                    if (x < 0) {
                        x = size - 1;
                    }

                    int y = (j + j_idx) % size;
                    if (y < 0) {
                        y = size - 1;
                    }
                    if (universe[x][y].isAlive()) {
                        ++alive;
                    }
                }
            }

            return alive;
        }

        static void copy(Universe from, Universe to) {
            int size = from.getSize();
            for (int i = 0; i < size; ++i) {
                for (int j = 0; j < size; ++j) {
                    Cell cell = to.at(i, j);
                    cell.setState(from.at(i, j).isAlive());
                }
            }
        }

        public int getAlive() {
            int alive = 0;

            for (Cell[] row : universe) {
                for (Cell cell : row) {
                    alive += cell.isAlive() ? 1 : 0;
                }
            }

            return alive;
        }
    }

    class UniverseGenerator {
        static long seed;

        static void setSeed(long seed) {
            UniverseGenerator.seed = seed;
        }

        static boolean fillCell(Random randomizer) {
            return randomizer.nextBoolean();
        }

        static void createUniverse(Universe universe) {
            Random randomize = new Random(seed);
            int size = universe.getSize();
            for (int i = 0; i < size; ++i) {
                Cell[] cells = universe.at(i);
                for (Cell cell : cells) {
                    cell.setState(fillCell(randomize));
                }
            }
        }

        static void evolve(Universe universe) {
            int size = universe.getSize();
            Universe tmp = new Universe(size);

            for (int i = 0; i < size; ++i) {
                for (int j = 0; j < size; ++j) {
                    Cell cell = universe.at(i, j);
                    byte aliveNeighbours = universe.countAliveNeighbours(i, j);

                    if (cell.isAlive() && (aliveNeighbours < 2 || aliveNeighbours > 3)) {
                        tmp.at(i, j).Die();
                    } else if (!cell.isAlive() && aliveNeighbours == 3) {
                        tmp.at(i, j).Alive();
                    } else {
                        tmp.at(i, j).setState(universe.at(i, j).isAlive());
                    }
                }
            }

            Universe.copy(tmp, universe);
        }
    }

    public class Main {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            int size = in.nextInt();

            Universe universe = new Universe(size);
            UniverseGenerator.createUniverse(universe);
            for (int i = 0; i < 10; ++i) {
                UniverseGenerator.evolve(universe);
                System.out.println("Generation #" + (i + 1));
                System.out.println("Alive: " + universe.getAlive());
                universe.printUniverse();
                try {
                    Thread.sleep(500);
                    if (System.getProperty("os.name").contains("Windows"))
                        new ProcessBuilder("cmd","/c","cls").inheritIO().start().waitFor();
                    else
                        Runtime.getRuntime().exec("clear");
                }
                catch (IOException | InterruptedException e) {}
            }
        }


    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/54/stages/298/implement
status: Solved
record: 13
